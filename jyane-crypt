#!/bin/bash

# This is a command-line tool for crypt/decrypt files.
#
# Usage:
#     jyane-crypt command
#
# Command:
#     - crypt [file]
#         crypt file.
#     - decrypt [file]
#         decrypt file.

# The MIT License (MIT)
#
# Copyright (c) 2014 Shohei KAMIMORI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

source "$(dirname "${BASH_SOURCE}")"/imosh/imosh || exit 1
DEFINE_bool stdio false 'Using standard input / output.'
eval "${IMOSH_INIT}"

_get_password() {
  if sub::isset JYANE_PASS; then
    echo "${JYANE_PASS}"
    return
  fi

  # notice : using with chmod 600
  # deprecated method! not recommended!
  local password_file="${HOME}/.jyane-crypt-config"
  if [ -r "${password_file}" ]; then
    cat "${password_file}"
    return
  fi

  # recommended method.
  read input_pass
  echo "${input_pass}"
  return

  LOG FATAL 'Password was not genereted.'
}

_decrypt() {
  local password=$(_get_password)

  if (( FLAGS_stdio )); then
    openssl enc -d -aes-256-cbc -base64 -pass "pass:${password}"
  else
    local encrypted_file="${2}"
    local encrypted_file_len=${#encrypted_file}
    local decrypted_file_len=$(( $encrypted_file_len-7 ))
    local decrypted_file="${encrypted_file:0:${decrypted_file_len}}"
    local decrypted_file_ext="${encrypted_file:${decrypted_file_len}:${encrypted_file_len}}"

    if [ "${decrypted_file_ext}" != '.aes256' ]; then
      LOG FATAL 'Argument extention is not aes256.'
    fi
    openssl enc -d -aes-256-cbc -base64 -pass "pass:${password}" \
      -in "${encrypted_file}" -out "${decrypted_file}"
  fi
}

_encrypt() {
  local password=$(_get_password)

  if (( FLAGS_stdio )); then
    openssl enc -aes-256-cbc -base64 -pass "pass:${password}"
  else
    local file="${2}"
    openssl enc -aes-256-cbc -base64 -pass "pass:${password}" -in "${file}" -out "${file}.aes256"
  fi
}

main() {
  local command="$1"

  if type "_${command}" >/dev/null 2>/dev/null; then
    "_${command}" "${@}"
  else
    LOG FATAL "No such command: ${command}"
  fi
}

# TODO(jyane): parse options.
# if [ "$#" -eq 2 ]; then
main "$@"
# else
    # LOG FATAL 'Arguments error.'
# fi
